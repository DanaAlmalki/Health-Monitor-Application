/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sensor_client_application;

/**
 *
 * @author hadee
 */
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Point;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

public class Sensor_Client extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public static long t;

    public Sensor_Client() {
        initComponents();
        this.setBackground(new Color(245, 218, 223));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        seconds = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Remote Health Monitoring System");
        setLocation(new java.awt.Point(640, 300));

        jPanel1.setBackground(new java.awt.Color(245, 218, 223));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 30)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(82, 34, 34));
        jLabel1.setText("Please Enter the Time in Seconds:");

        seconds.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jButton1.setFont(new java.awt.Font("Dubai", 1, 26)); // NOI18N
        jButton1.setForeground(new java.awt.Color(82, 34, 34));
        jButton1.setText("Enter");
        jButton1.setToolTipText("");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(85, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(74, 74, 74))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addComponent(seconds, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(207, 207, 207)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(112, 112, 112)
                .addComponent(jLabel1)
                .addGap(79, 79, 79)
                .addComponent(seconds, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(64, 64, 64)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //*Main code*
        // get the time from the user
        t = Long.parseLong(seconds.getText());
        if (t < 60) {
            JOptionPane.showMessageDialog(null, "The time is less than 60 Seconds, Please try again.");
            return;
        }

        //After Start
        // 1-Connection with the Server
        try {
            connectToServer();
        } catch (IOException ex) {
            Logger.getLogger(Sensor_Client.class.getName()).log(Level.SEVERE, null, ex);
        }

        long user_time = t;
        user_time *= 1000;//2- convert the time from seconds to milliseconds  

        user_time += System.currentTimeMillis();//add user_time in the current time

        this.setVisible(false);

        set_up_gui();

        while (user_time > System.currentTimeMillis()) {
            try {
                //3- get random data 
                temperature = randomTem();
                heartRate = randomHeart();
                oxygen = randomOxygen();

                printAndSendData();//4- send data ro tha personal server and print data 

                Thread.sleep(5000); //5- stop the code 5 seconds

            } catch (IOException ex) {
                Logger.getLogger(Sensor_Client.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(Sensor_Client.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        // 
        JOptionPane.showMessageDialog(null, "The " + t + " Seconds is ended");

        frame.setVisible(true);

        try {
            close_connection();
        } catch (Exception ex) {
            Logger.getLogger(Sensor_Client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    static String s = "";
    private static Socket socket;

    private static OutputStreamWriter sendToServer;

    private static BufferedWriter buf_SendToServer;

    private static double temperature;
    private static double heartRate;
    private static int oxygen;
    private static String date;
    private static String time;

    static String sensedTemperature;
    static String sensedHeart;
    static String sensedoxygen;

    static JFrame frame;
    static JTextArea textArea;

    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Sensor_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Sensor_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Sensor_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Sensor_Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Welcome w = new Welcome();
                w.setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField seconds;
    // End of variables declaration//GEN-END:variables
public static long gettime() {
        return t;
    }

    public static String DoubleToString(double d) {
        String str = Double.toString(d);
        return str;
    }

    public static void printAndSendData() throws IOException {
        //Send and print the *temperature* to the Personal Server
        date = date();
        time = time();

        displayTemp();
        buf_SendToServer.write(DoubleToString(temperature));
        buf_SendToServer.newLine();
        buf_SendToServer.write(date);
        buf_SendToServer.newLine();
        buf_SendToServer.write(time);
        buf_SendToServer.newLine();

        //Send and print the *heart rate* to the Personal Server
        displayHeart();
        buf_SendToServer.write(DoubleToString(heartRate));
        buf_SendToServer.newLine();
        buf_SendToServer.write(date);
        buf_SendToServer.newLine();
        buf_SendToServer.write(time);
        buf_SendToServer.newLine();

        //Send and print the *oxygen saturation* to the Personal Server
        displayOxygen();
        buf_SendToServer.write(Integer.toString(oxygen));
        buf_SendToServer.newLine();
        buf_SendToServer.write(date);
        buf_SendToServer.newLine();
        buf_SendToServer.write(time);
        buf_SendToServer.newLine();
        buf_SendToServer.flush();

    }

    public static void connectToServer() throws IOException {
//InetAddress addresses = InetAddress.getByName("x.x.x.x");
//            String hostName = addresses.getHostName();
//            personal2MedicalConnection = new Socket(hostName, 1204);
        socket = new Socket("localhost", 2000);

        sendToServer = new OutputStreamWriter(socket.getOutputStream());

        buf_SendToServer = new BufferedWriter(sendToServer);
    }

    //To generate a random number for the Temperature sensor between 36C and 41C.
    public static double randomTem() {
        double temperature = 36 + (Math.random() * ((41 - 36) + 1));
        if (temperature > 41) {
            temperature = 41.0;
        }

        temperature = Double.parseDouble(new DecimalFormat("##.#").format(temperature));//Get one digit after the decimal point
        return temperature;
    }

    //To generate a random number for the Heart rate sensor between 50 and 120.
    public static double randomHeart() {
        double heartRate = 50 + (Math.random() * ((120 - 50) + 1));
        if (heartRate > 120) {
            heartRate = 120.0;
        }
        heartRate = Double.parseDouble(new DecimalFormat("##.#").format(heartRate)); //Get one digit after the decimal point
        return heartRate;
    }

    //To generate a random number for the Oxygen level sensor between 60% to 100%.
    public static int randomOxygen() {
        int oxygen = 60 + (int) (Math.random() * ((100 - 60) + 1));
        return oxygen;
    }

    // get the date
    public static String date() {
        Date date = new Date();
        SimpleDateFormat DateFor = new SimpleDateFormat("dd MMMM yy");
        String stringDate = DateFor.format(date);
        return stringDate;
    }

    // get the time 
    public static String time() {
        Date time = new Date();
        SimpleDateFormat TimeFor = new SimpleDateFormat("HH:mm:ss");
        String stringTime = TimeFor.format(time);
        return stringTime;
    }

    static void set_up_gui() {
        frame = new JFrame("Sensor");
        // creat text area
        textArea = new JTextArea(
                ""
        );
        // customize the text area
        textArea.setFont(new Font("DialogInput", Font.PLAIN, 25));
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        textArea.setBackground(new Color(245, 218, 223));
        textArea.setForeground(new Color(105, 105, 105));
        textArea.setEditable(false);

        // creat a scroll pane to allow scrolling
        JScrollPane scrollPane = new JScrollPane(textArea);

        //Add the text area to the frame
        frame.add(scrollPane);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // set the frame size
        frame.setPreferredSize(new Dimension(700, 400));

        frame.pack();
        // set the frame location on the screen
        Point point = new Point(610, 340 - 200);
        frame.setLocation(point);
        frame.setAlwaysOnTop(true);
    }

    // use gui to display the Sensor server output
    static void displayTemp() {

        // add to the text area
        textArea.append(
                "At date: " + date + ", time " + time + ", sensed temperature is " + temperature + "\n"
        );
    }

    static void displayHeart() {

        // add to the text area
        textArea.append(
                "At date: " + date + ", time " + time + ", sensed heart rate is " + heartRate + "\n"
        );
    }

    static void displayOxygen() {

        // add to the text area
        textArea.append(
                "At date: " + date + ", time " + time + ", sensed oxygen saturation is " + oxygen + "\n\n"
        );
    }

    static void close_connection() throws Exception {
        socket.close();

        sendToServer.close();

        buf_SendToServer.close();
    }
}
