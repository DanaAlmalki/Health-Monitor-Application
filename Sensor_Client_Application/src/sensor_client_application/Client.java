/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sensor_client_application;

/**
 *
 * @author hadee
 */
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Point;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;


public class Client extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public static long t;

    public Client() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        seconds = new javax.swing.JTextField();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Remote Health Monitoring System");

        jButton1.setFont(new java.awt.Font("Dubai", 1, 24)); // NOI18N
        jButton1.setText("Enter");
        jButton1.setToolTipText("");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        seconds.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel1.setText("Please Enter the Time in Seconds:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(seconds, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(114, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(seconds, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(104, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

// get the time from the user
        t = Long.parseLong(seconds.getText());
        if (t < 60) {
            JOptionPane.showMessageDialog(null, "The time is less than 60 Seconds, Please try again.");
            return;
        }

        //After Start
        // 1-Connection with the Server
        try {
            connectToServer();
        } catch (IOException ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }

        long user_time = t;
        user_time *= 1000;
        user_time += System.currentTimeMillis();

        this.setVisible(false);
        set_up_gui();
        while (user_time > System.currentTimeMillis()) {
            try {
                temperature = randomTem();
                heartRate = randomHeart();
                oxygen = randomOxygen();
                printAndSendData();
                Thread.sleep(5000);
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        //d.ends(s);
        //d.setVisible(true);

        JOptionPane.showMessageDialog(null, "The " + t + " Seconds is ended");

        
        try {
            close_connection();
        } catch (Exception ex) {
            Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    static String s = "";
    private static Socket socket;

    private static InputStreamReader responsFromServer;
    private static OutputStreamWriter sendToServer;

    private static BufferedReader buf_responsFromServer;
    private static BufferedWriter buf_SendToServer;

    private static double temperature;
    private static double heartRate;
    private static int oxygen;
    private static String date;
    private static String time;

    static end d = new end();
    static String sensedTemperature;
    static String sensedHeart;
    static String sensedoxygen;
    
    static JFrame frame = new JFrame("Medical Server");
    static JTextArea textArea;
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Welcome w = new Welcome();
                w.setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JTextField seconds;
    // End of variables declaration//GEN-END:variables
public static long gettime() {
        return t;
    }

    public static String DoubleToString(double d) {
        String str = Double.toString(d);
        return str;
    }

    public static void printAndSendData() throws IOException {
        //Send and print the *temperature* to the Personal Server
        date = date();
        time = time();
        //d.setVisible(true);
        System.out.println("At date: " + date + ", time " + time + ", sensed temperature is " + temperature);
        d.display("At date: " + date + ", time " + time + ", sensed temperature is " + temperature + "\n");
        displayTemp();
        buf_SendToServer.write(DoubleToString(temperature));
        buf_SendToServer.newLine();
        buf_SendToServer.write(date);
        buf_SendToServer.newLine();
        buf_SendToServer.write(time);
        buf_SendToServer.newLine();

        //Send and print the *heart rate* to the Personal Server
        date = date();
        time = time();
        System.out.println("At date: " + date + ", time " + time + ", sensed heart rate is " + heartRate);
        //d.display("At date: " + date + ", time " + time + ", sensed heart rate is " + heartRate + "\n");
        displayHeart();
        buf_SendToServer.write(DoubleToString(heartRate));
        buf_SendToServer.newLine();
        buf_SendToServer.write(date);
        buf_SendToServer.newLine();
        buf_SendToServer.write(time);
        buf_SendToServer.newLine();

        //Send and print the *oxygen saturation* to the Personal Server
        date = date();
        time = time();
        System.out.println("At date: " + date + ", time " + time + ", sensed oxygen saturation is " + oxygen);
       //d.display("At date: " + date + ", time " + time + ", sensed oxygen saturation is " + oxygen);
       displayOxygen();
        buf_SendToServer.write(Integer.toString(oxygen));
        buf_SendToServer.newLine();
        buf_SendToServer.write(date);
        buf_SendToServer.newLine();
        buf_SendToServer.write(time);
        buf_SendToServer.newLine();
        buf_SendToServer.flush();
        
        
        //s += "\n\n";
        d.display("\n\n");
        System.out.println("");
    }

    public static void connectToServer() throws IOException {

        socket = new Socket("localhost", 2000);

        responsFromServer = new InputStreamReader(socket.getInputStream());
        sendToServer = new OutputStreamWriter(socket.getOutputStream());

        buf_responsFromServer = new BufferedReader(responsFromServer);
        buf_SendToServer = new BufferedWriter(sendToServer);
    }

    //To generate a random number for the Temperature sensor between 36C and 41C.
    public static double randomTem() {
        double temperature = 36 + (Math.random() * ((41 - 36) + 1));
        if (temperature > 41) {
            temperature = 41.0;
        }
        temperature = Double.parseDouble(new DecimalFormat("##.#").format(temperature));
        return temperature;
    }

    //To generate a random number for the Heart rate sensor between 50 and 120.
    public static double randomHeart() {
        double heartRate = 50 + (Math.random() * ((120 - 50) + 1));
        if (heartRate > 120) {
            heartRate = 120.0;
        }
        heartRate = Double.parseDouble(new DecimalFormat("##.#").format(heartRate));
        return heartRate;
    }

    //To generate a random number for the Oxygen level sensor between 60% to 100%.
    public static int randomOxygen() {
        int oxygen = 60 + (int) (Math.random() * ((100 - 60) + 1));
        return oxygen;
    }

    // get the date
    public static String date() {
        Date date = new Date();
        SimpleDateFormat DateFor = new SimpleDateFormat("dd MMMM yy");
        String stringDate = DateFor.format(date);
        return stringDate;
    }

    // get the time 
    public static String time() {
        Date time = new Date();
        SimpleDateFormat TimeFor = new SimpleDateFormat("HH:mm:ss");
        String stringTime = TimeFor.format(time);
        return stringTime;
    }
    
    
    
    
    static void set_up_gui(){
            // creat text area
        textArea = new JTextArea(
                ""
        );
        // customize the text area
        textArea.setFont(new Font("DialogInput", Font.PLAIN, 25));
        textArea.setLineWrap(true);
        textArea.setWrapStyleWord(true);
        textArea.setBackground(new Color(245, 255, 250));
        textArea.setForeground(new Color(105, 105, 105));
        textArea.setEditable(false);

        // creat a scroll pane to allow scrolling
        JScrollPane scrollPane = new JScrollPane(textArea);
        
        //Add the text area to the frame
        frame.add(scrollPane);
        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
        
        // set the frame size
        frame.setPreferredSize(new Dimension(700, 400));
  
        frame.pack();
        // set the frame location on the screen
        Point point = new Point(610-350, 340);
        frame.setLocation(point);   
    }
    
    // use gui to display the medical server output
    static void displayTemp() {
        frame.setVisible(true);
        // add to the text area
        textArea.append(
                "At date: " + date + ", time " + time + ", sensed temperature is " + temperature + "\n"
        );
    }
    static void displayHeart() {
        frame.setVisible(true);
        // add to the text area
        textArea.append(
                "At date: " + date + ", time " + time + ", sensed heart rate is " + heartRate + "\n"
        );
    }
    static void displayOxygen() {
        frame.setVisible(true);
        // add to the text area
        textArea.append(
                "At date: " + date + ", time " + time + ", sensed oxygen saturation is " + oxygen+"\n"
        );
    }
    
    static void close_connection() throws Exception{
        socket.close();
        
        responsFromServer.close();
        sendToServer.close();
        
        buf_responsFromServer.close();
        buf_SendToServer.close();
    }
}
